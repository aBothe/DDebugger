
Just a rough class design and some thoughts about how everything should work:

- NativeDebugger
	- LaunchExecutable : Debuggee
	- AttachToProcess : Debuggee

- Debuggee : System.Diagnostics.Process // might by a Process^ mProc; member only
	- Breakpoints
		- Enum : Breakpoint[]
		- Add(Offset)
		- Remove(Id)
	- DebugThreads
		- Enum
		- Current
	- Modules : Module[]
	- PauseExecution // DebugBreakpoint(hProcess)
	- ResumeExecution
	- Debug Events + handling, call backs, overloadable events for custom output
	- Disassembler support -> Just read from virtual memory, make text out of the commands, and display the instructions in a view

- Breakpoint
	- Id
	- Offset
	- HitCount
	- Enabled (get/set)

- Module
	- FileName
	--> Can be done via .net Process class

- DebugThread
	- StackFrames : StackFrame[] // == Call stack

- StackFrame
	- CurrentInstruction (get/set)
	- Registers : Register[] 		// probably a long[string] dictionary for value[register name]?

- Register
	- Name
	- Value (get/set)


- DDebugger : NativeDebugger
	- getCodeLocationFromAddress(out string file, out CodeLocation location, ulong/uint address)
	- getAddressFromCodeLocation(string file, CodeLocation location) : ulong/uint
	- getFunctionLocals/getObjectMembers
	- getGlobals (?)
	- getTypes (?) -- enum types/static types ->> ability to display static items == Win!
	- toString()-CodeInjection after launch and while acquiring symbol values == Win!
	- enum type/object getters ->> Execute them to display getter values == Win!
	- Expression evaluation -> Done with the D parser's evaluation engine.
	- "this" examination + all its properties